<?xml version="1.0"?>
<!-- vim: set ts=4 sw=4 noexpandtab:  -->
<comms>
	<potential_args>
		<arg>
			<name>MS1_NUM_BYTES</name>
			<desc>Length of data to transfer (read or write)</desc>
			<type>_DATA_</type>
			<internal_name>num_bytes</internal_name>
			<size>_U08_</size>
		</arg>
		<arg>
			<name>MS1_PAGE</name>
			<desc>Page inside ECU firmware</desc>
			<type>_DATA_</type>
			<internal_name>phys_ecu_page</internal_name>
			<size>_U08_</size>
		</arg>
		<arg>
			<name>MS1_OFFSET</name>
			<desc>Offset from the beginning of the page.</desc>
			<type>_DATA_</type>
			<internal_name>offset</internal_name>
			<size>_U08_</size>
		</arg>
		<arg>
			<name>MS1_BYTE</name>
			<desc>byte to transfer to ECU, length is 1 byte </desc>
			<type>_DATA_</type>
			<internal_name>value</internal_name>
			<size>_U08_</size>
		</arg>
		<arg>	
			<name>DATACHUNK</name>
			<desc>Data to transfer to ECU, length is variable. Only applies to chunk write compatible firmwares </desc>
			<type>_DATA_</type>
			<internal_name>data</internal_name>
			<size>_UNDEF_</size>
		</arg>
		<arg>
			<name>PAUSE_100MS</name>
			<desc>Pause for 100ms.</desc>
			<type>_ACTION_</type>
			<action>_SLEEP_</action>
			<action_arg>100000</action_arg>
		</arg>
		<arg>
			<name>PAUSE_500MS</name>
			<desc>Pause for 500ms.</desc>
			<type>_ACTION_</type>
			<action>_SLEEP_</action>
			<action_arg>500000</action_arg>
		</arg>
		<arg>
			<name>SEND_X</name>
			<desc>Sends a simple "X"</desc>
			<type>_STATIC_STRING_</type>
			<string>X</string>
		</arg>
	</potential_args>
	<commands>
		<cmd>
			<name>ms1_change_page</name>
			<desc> Sets the ms1 page to the passed page number</desc>
			<type>_WRITE_CMD_</type>
			<base>P</base>
			<args>
				<arg>MS1_PAGE</arg>
				<arg>PAUSE_100MS</arg>
			</args>
			<defer_post_functions>TRUE</defer_post_functions>
		</cmd>
		<cmd>
			<name>ms1_extra_reboot_get_error</name>
			<desc>Reboots the ECU and grabs the error string</desc>
			<type>_WRITE_CMD_</type>
			<base>!!</base>
			<args>
				<arg>PAUSE_100MS</arg>
				<arg>PAUSE_100MS</arg>
				<arg>SEND_X</arg>
			</args>
			<helper_func>simple_read_hf</helper_func>
			<helper_func_arg>_MS1_GETERROR_</helper_func_arg>
			<defer_post_functions>FALSE</defer_post_functions>
			<post_functions>
				<function>enable_reboot_button_pf</function>
			</post_functions>
		</cmd>
		<cmd>
			<name>ms1_std_rtvars</name>
			<desc>Gets the realtime vars from the ECU, returns a var length block</desc>
			<type>_WRITE_CMD_</type>
			<base>A</base>
			<helper_func>simple_read_hf</helper_func>
			<helper_func_arg>_MS1_RT_VARS_</helper_func_arg>
			<defer_post_functions>FALSE</defer_post_functions>
			<post_functions>
				<function>update_logview_traces_pf</function>
			</post_functions>
		</cmd>
		<cmd>
			<name>ms1_extra_rtvars</name>
			<desc>Gets the realtime vars from the ECU, returns a var length block</desc>
			<type>_WRITE_CMD_</type>
			<base>R</base>
			<helper_func>simple_read_hf</helper_func>
			<helper_func_arg>_MS1_RT_VARS_</helper_func_arg>
			<defer_post_functions>FALSE</defer_post_functions>
			<post_functions>
				<function>update_logview_traces_pf</function>
			</post_functions>
		</cmd>
		<cmd>
			<name>ms1_generic_write</name>
			<desc>Generic write function, sets data to any page and offset</desc>
			<type>_WRITE_CMD_</type>
			<base>W</base>
			<args>
				<arg>MS1_OFFSET</arg>
				<arg>MS1_BYTE</arg>
			</args>
			<defer_post_functions>FALSE</defer_post_functions>
			<post_functions>
				<function_w_arg>send_to_slaves</function_w_arg>
				<function_w_arg>update_write_status</function_w_arg>
			</post_functions>
		</cmd>
		<cmd>
			<name>ms1_chunk_write</name>
			<desc>MS1 Chunk write function, sets data to any page and offset</desc>
			<type>_WRITE_CMD_</type>
			<base>X</base>
			<args>
				<arg>MS1_OFFSET</arg>
				<arg>MS1_NUM_BYTES</arg>
				<arg>DATACHUNK</arg>
				<arg>PAUSE_500MS</arg>
			</args>
			<defer_post_functions>FALSE</defer_post_functions>
			<post_functions>
				<function_w_arg>send_to_slaves</function_w_arg>
				<function_w_arg>update_write_status</function_w_arg>
			</post_functions>
		</cmd>
		<cmd>
			<name>ms1_burn</name>
			<desc>burns the current page flash</desc>
			<type>_WRITE_CMD_</type>
			<base>B</base>
			<args>
				<arg>PAUSE_500MS</arg>
			</args>
			<defer_post_functions>FALSE</defer_post_functions>
			<post_functions>
				<function_w_arg>post_single_burn_pf</function_w_arg>
				<function_w_arg>update_write_status</function_w_arg>
			</post_functions>
		</cmd>
		<cmd>
			<name>ms1_burn_all</name>
			<desc>Calls a function to burn ALL applicable ms1 pages to flash</desc>
			<type>_FUNC_CALL_</type>
			<func_call_name>burn_all_helper</func_call_name>
			<func_call_arg>_MS1_</func_call_arg>
			<defer_post_functions>TRUE</defer_post_functions>
			<post_functions>
				<function_w_arg>update_write_status</function_w_arg>
			</post_functions>
		</cmd>
		<cmd>
			<name>ms1_get_clock</name>
			<desc>Triggers the ecu to echo back it's 8bit clock</desc>
			<type>_WRITE_CMD_</type>
			<base>C</base>
			<helper_func>simple_read_hf</helper_func>
			<helper_func_arg>_MS1_CLOCK_</helper_func_arg>
		</cmd>
		<cmd>
			<name>ms1_get_textrev</name>
			<desc>Triggers the ecu to echo back it's textual revision</desc>
			<type>_WRITE_CMD_</type>
			<base>T</base>
			<helper_func>simple_read_hf</helper_func>
			<helper_func_arg>_TEXT_REV_</helper_func_arg>
		</cmd>
		<cmd>
			<name>get_signature</name>
			<desc>Triggers the ecu to echo back it's api signature</desc>
			<type>_WRITE_CMD_</type>
			<base>S</base>
			<helper_func>simple_read_hf</helper_func>
			<helper_func_arg>_SIGNATURE_</helper_func_arg>
		</cmd>
		<cmd>
			<name>get_numrev</name>
			<desc>Triggers the ecu to echo back it's version number</desc>
			<type>_WRITE_CMD_</type>
			<base>Q</base>
			<helper_func>simple_read_hf</helper_func>
			<helper_func_arg>_NUM_REV_</helper_func_arg>
		</cmd>
		<cmd>
			<name>ms1_veconst</name>
			<desc>Triggers the MS1 to return the VE/Constants for the previously set page</desc>
			<type>_WRITE_CMD_</type>
			<base>V</base>
			<helper_func>simple_read_hf</helper_func>
			<helper_func_arg>_MS1_VECONST_</helper_func_arg>
		</cmd>
		<cmd>
			<name>interrogation</name>
			<desc>Interrogates ECU to determine what it is</desc>
			<type>_FUNC_CALL_</type>
			<func_call_name>interrogate_ecu</func_call_name>
			<defer_post_functions>FALSE</defer_post_functions>
			<post_functions>
				<function>update_interrogation_gui_pf</function>
				<function>load_realtime_map_pf</function>
				<function>initialize_dashboards_pf</function>
				<function>load_status_pf</function>
				<function>load_rt_text_pf</function>
				<function>load_gui_tabs_pf</function>
				<function>setup_menu_handlers_pf</function>
				<function>start_statuscounts_pf</function>
				<function>reset_temps_pf</function>
				<function>startup_default_timeouts_pf</function>
			</post_functions>
		</cmd>
		<cmd>
			<name>ms1_read_all</name>
			<desc>Reads ALL ecu vars for ALL modules </desc>
			<type>_FUNC_CALL_</type>
			<func_call_name>read_ve_const</func_call_name>
			<func_call_arg>_MS1_VECONST_</func_call_arg>
			<defer_post_functions>TRUE</defer_post_functions>
			<post_functions>
				<function>update_groups_pf</function>
				<function>update_sources_pf</function>
				<function>update_ecu_controls_pf</function>
				<function>set_store_black_pf</function>
				<function>enable_get_data_buttons_pf</function>
				<function>conditional_start_rtv_tickler_pf</function>
			</post_functions>
		</cmd>
		<cmd>
			<name>ms1_e_read_trigmon</name>
			<desc>Reads trigmon page </desc>
			<type>_FUNC_CALL_</type>
			<func_call_name>read_ve_const</func_call_name>
			<func_call_arg>_MS1_E_TRIGMON_</func_call_arg>
			<defer_post_functions>TRUE</defer_post_functions>
			<post_functions>
				<function>crunch_trigtooth_data_pf</function>
				<function>update_trigtooth_display_pf</function>
			</post_functions>
		</cmd>
		<cmd>
			<name>ms1_e_read_toothmon</name>
			<desc>Reads toothmon page </desc>
			<type>_FUNC_CALL_</type>
			<func_call_name>read_ve_const</func_call_name>
			<func_call_arg>_MS1_E_TOOTHMON_</func_call_arg>
			<defer_post_functions>TRUE</defer_post_functions>
			<post_functions>
				<function>crunch_trigtooth_data_pf</function>
				<function>update_trigtooth_display_pf</function>
			</post_functions>
		</cmd>
	</commands>
</comms>
